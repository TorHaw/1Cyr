# SI413 Lab 1.1: Spec for Just Strings language

your_name: Toren Hawk

your_alpha: 262682

used_ai: Y # remember to turn in an aichat.md file as well


# Task 1

language_name: hawkl


# Task 2

example_program: |
    ---
    This is an example program that takes one input, concatenates it with a string, 
    reverses the order of characters, and prints the result to the screen 
    ---
    - check out these two ways to comment

    speak: rev: <$<> & __ & <$>>;; - kinda fun right?


example_input_1: |
    hello world!

example_output_1: |
    >!!dlrow olleh<

example_input_2: |
    wild wild west

example_output_2: |
    >tsew dliw dliw<


# Task 3

language_syntax: |

    Statements may consist of...

        Expressions
        code evaluated to produce a value.

        Printing
        speak:; takes a string literal between the colon and semi-colon.

    Expressions may consist of...

        Ordinary Characters
        An ordinary character is any single character other than newline,
        <, >, $, &, _, -.

        String Literals
        A left angled bracket <, followed by a sequence of ordinary
        characters and escape sequences, followed by a right bracket character >.

        Concatenation
        An ampersand & which must be between two string literals.

        Escape Sequence
        An escape sequence is a dollar sign $ immediately followed by any single
        character inside a string literal.

        Reversing
        rev:; takes a string literal between the colon and semi-colon.

        Taking Input
        A single underscore _ followed immediately by another underscore.

        White space
        White space can be between statments and expressions.

    
    Comment Block

        Three dashes --- not inside a string literal marks the begining of a comment block 
        and a second three dashes --- marks the end of the comment block. These triple dashes
        can span over multiple lines
 
        A comment may also begin as any character on the same line after a single dash -.
     


language_semantics: |

    String literals
    Within a string literal, ordinary characters are interpreted as
    themselves, and escape sequences are interpreted as the character
    after the dollar sign.

    Empty brackets
    <> are treated as white space but are still a syntactically valid statement. 

    Dollar sign
    A dollar sign followed by a space inside a string literal will simply
    be interpreted as the character $.

    White Space
    Any amount of white space between statments and expressions is ignored.

    End of Code Line
    Produces no value yet indicates to the compiler the end of a coding line.
    Threfore, any characters after a dash - yet still on the same line will be 
    interpreted as a comment. 

    Input 
    reads a line of text from the terminal and returns it to the program.

    Print
    Takes takes an expression and prints it to the terminal.

    Empty Print
    Print:<>; while syntactically correct has no result.

    Reversal
    Takes an expression, reverses the order of it, and returns the reverse string.

    Order of Operations
    Any operations of the same kind evaluate from left to right. Expressions nested within
    within one another will be evaluated from inside to out.

    White space between statments and expressions are ignored.

# Task 4

reviewer_for: Toren Hawk

reviewed_by: 

review_passed: 

reviewer_comments: 
