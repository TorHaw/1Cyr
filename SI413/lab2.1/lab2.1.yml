# SI413 Lab 2.1: Spec for StringBoolVar Language

your_name: Toren Hawk

your_alpha: 262682

used_ai: Y # remember to turn in an aichat.md file as well

# describe any collaboration or help you got from classmates
collaboration: |
    NONE

# leave this as NONE for your initial submission
changes_on_resubmit: |
    NONE

#### TASK 1 ####

language_name: codeSurfer


#### TASK 2 ####

example_program: |
    \ Example program by Toren Hawk \

    \ Print a string literal \
    ~This language is totally radical~ brah

    \ Input a string and print it \
    ~Exciting~ brah dawnPatrol brah

    \ Concatenate two string literals and print the result \
    ~The waves are~ ~gnarly today~ ~crazy~ partywave partywave brah

    \ Reverse a string literal and print it \
    ~Check out this sick move!~ cutback brah

    \ Demonstration of escape character and inline comment \
    ~I love surfing waves that look like '_~'~ brah

    \ Boolean literals goofy=false and regular=true and nah=not \
    regular nah brah

    \ Boolean AND operation and or operation lineup=and A-frame=or \
    goofy regular regular lineup A-frame brah

    \ String less than operation and greater than operation kook=less than kahuna=greater than \
    \~bomb~ ~swell~ kook ~gnarly~ ~break~ kahuna A-frame brah

    \ String contains \
    ~surfboard~ ~surf~ impactzone brah

    \ String variable assignment and usage \
    ~totally sketchy man~ quiver x
    ~not chill.~ quiver x
    x brah

    \ Boolean variable assignment and usage \
    goofy leash y 
    y brah

example_input_1: |
    noice

example_output_1: |
    This language is totally radical
    Exciting
    noice
    The waves aregnarly todaycrazy
    !evom kcis siht tuo kcehC
    I love surfing waves that look like '~'
    goofy
    regular
    regular
    regular
    not chill.
    goofy 

example_input_2: |
    Bruh

example_output_2: |
    This language is totally radical
    Exciting
    Bruh
    The waves aregnarly todaycrazy
    !evom kcis siht tuo kcehC
    I love surfing waves that look like '~'
    goofy
    regular
    regular
    regular
    not chill.
    goofy 


#### TASK 3 ####

# there are just two example tokens below; you should remove or modify them!!
tokens: |
    Token name    Regex
    ----------    -----
    NOT            nah
    AND            lineup
    OR             A-frame
    LESS           kook
    GREATER        kahuna
    CONTAINS       impactzone
    STRING         ~([^~]|_~)*~
    BOOL           goofy|regular
    VAR            [a-zA-Z_][a-zA-Z0-9_]*
    ASSIGNSTR      quiver
    ASSIGNBOOL     leash
    PRINT          brah
    INPUT          dawnPatrol
    CONCAT         partywave
    REVERSE        cutback
    COMMENT        \[^\]*\
    --             [ \t\n]


#### TASK 4 ####

# remove or replace the example production rule with your own!
grammar: |
    program -> statement program
              | EOF
    statement -> expression PRINT
              | expression ASSIGNSTR VAR
              | expression ASSIGNBOOL VAR
    expression -> 
              | expression expression GREATER
              | expression expression LESS
              | expression expression CONTAINS
              | expression expression CONCAT
              | expression expression AND
              | expression expression OR
              | expression NOT
              | expression REVERSE
              | STRING
              | BOOL
              | VAR
              | INPUT
              | null


#### TASK 5 ####

semantics: |
    Print takes an expression and prints it to the terminal

    Within a string literal, ordinary characters are interpreted as
    themselves, and escape sequences are interpreted as the character
    after the underscore.

    Concatenate takes two string expressions and combines them in left-to-right
    order.

    Reversal takes an expression, reverses it, and
    then returns the reversed string.

    Input reads a line of text from the terminal and returns it.

    Assign string takes a String expression to the left and assigns it to a variable
    name listed to the right.

    Assign bool takes a boolean expression to the left and assigns it to a variable
    name listed to the right.

    contains string takes two string expressions and compares them by checking if the second string
    expression exists in the first (when reading left to right).

    Less and greater takes two string expressions to the left and compares them left to right.

    Not takes a single boolean expression to the left and return the opposite of it. 

    And and Or takes two boolean expressions to the left and returns the assosciated boolean 
    expression from an And or Or statement on the two values.

#### TASK 6 ####

reviewer_for: Matt Irving

reviewed_by: Matt Irving

review_passed: Y

reviewer_comments: |
    Language idea seems quite radical. I like the surfer theme. Still needs quite a bit of work to finish off the parts, but this is
    is definitely a good start. Keep it up!

    Resubmit Comments: These specs look a lot better, very visually appealing. The example program is very robust and cover a lot of cases.
    The tokens and regexes look correct, and the grammar looks good as well. I thought the grammar would need more specification when it came 
    to types of expressions, but on further thought, I think this way works fine, since the grammar isn't in charge of type checking, or at 
    least I think. Semantics section looks good. Job well done, I think this all covers everything.
